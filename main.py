#!/usr/bin/python3
# -*- coding: utf-8 -*-
# Coded By Kuduxaaa

import os
from queue import Queue
from threading import Thread

from bs4 import BeautifulSoup
from datetime import datetime

import json
import requests

results = []
concurrent = 50
counter = 0
q = None


def save(data, finall=False) -> bool:
    if finall:
        with open('parsed_exploits.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
            f.close()
        return True
    else:
        results.append(data)
        return True


def do_work():
    while True:
        url = q.get()
        res = get_response(url)
        cve_id = str(url).split('cve_id=')[1]
        if 'Unknown CVE ID' not in res.text:
            handler(res, cve_id)
        q.task_done()


def get_response(url):
    global counter
    try:
        res = requests.get(url)
        return res
    except Exception as e:
        print(e)
        pass


def handler(res, cve_id):
    try:
        data = dict()
        soup = BeautifulSoup(res.text, 'html.parser')
        td = [str(x.text).replace('\n', ' ').replace('\t', '').strip() for x in soup.findAll('td')]
        # print(soup)
        data['cve_id'] = cve_id
        data['cve_score'] = str(soup.find('div', {'class': 'cvssbox'}).text).strip()
        data['cve_ulnerability_type'] = td[23]
        data['cve_description'] = str(
            soup.find('div', {
                'class': 'cvedetailssummary'
            }).text) \
            .replace('\n', ' ') \
            .replace('\t', '') \
            .strip()

        data['authentication'] = td[21]
        data['access_complexity'] = td[20]
        data['gained_access'] = td[22]
        data['cwe_id'] = td[24]
        data['references'] = list()

        for y in [x.findAll('a') for x in soup.findAll('td', {'class': 'r_average'})]:
            reference = str(y[0].get('href'))
            data['references'].append(reference)

        if save(data):
            print(f'[+] {cve_id} Successfully Saved')
            return True
        else:
            return False
    except Exception as e:
        print(e)
        return False


def run():
    global q
    q = Queue(concurrent * 2)
    for _ in range(concurrent):
        try:
            t = Thread(target=do_work)
            t.daemon = True
            t.start()

        except Exception as e:
            print(e)
            continue

    try:
        for year in range(2000, int(datetime.now().year) + 1):
            prefix = 'https://www.cvedetails.com/cve-details.php?cve_id=CVE-' + str(year) + '-{:04n}'
            cves = [prefix.format(i) for i in range(1, 10000)]
            for cve in cves:
                q.put(cve.strip())

            q.join()
            save(results, finall=True)
    except KeyboardInterrupt:
        save(results, finall=True)


if __name__ == '__main__':
    run()
